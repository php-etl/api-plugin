<?php

require __DIR__ . '/../vendor/autoload.php';

use Kiboko\Plugin\API;
use Kiboko\Plugin\API\Service;
use PhpParser\Node;
use PhpParser\PrettyPrinter;
use Symfony\Component\Console;
use Symfony\Component\Yaml;

$input = new Console\Input\ArgvInput($argv);
$output = new Console\Output\ConsoleOutput();

class TestCommand extends Console\Command\Command
{
    protected static $defaultName = 'test';

    protected function configure()
    {
        $this->addArgument('file', Console\Input\InputArgument::REQUIRED);
    }

    protected function execute(Console\Input\InputInterface $input, Console\Output\OutputInterface $output)
    {
        $factory = new Service();

        $style = new Console\Style\SymfonyStyle(
            $input,
            $output,
        );

        $config = Yaml\Yaml::parse(input: file_get_contents($input->getArgument('file')));

        $style->section('Validation');
        $style->writeln($factory->validate($config) ? '<info>ok</info>' : '<error>failed</error>');
        $style->section('Normalized Config');
        $style->writeln(\json_encode($config = $factory->normalize($config), JSON_PRETTY_PRINT));
        $style->section('Generated code');
        $repository = $factory->compile($config);
        $style->writeln((new PrettyPrinter\Standard())->prettyPrintFile([
            $repository->getBuilder()->getNode(),
        ]));
        $style->section('Generated files');
        $style->listing(array_map(fn ($file) => $file->getPathname(), $repository->getFiles()));

        return 0;
    }
}

class BuildCommand extends Console\Command\Command
{
    protected static $defaultName = 'build';

    protected function configure()
    {
        $this->addArgument('file', Console\Input\InputArgument::REQUIRED);
        $this->addArgument('output', Console\Input\InputArgument::REQUIRED);
    }

    protected function execute(Console\Input\InputInterface $input, Console\Output\OutputInterface $output)
    {
        $factory = new Service();

        $style = new Console\Style\SymfonyStyle(
            $input,
            $output,
        );

        $config = Yaml\Yaml::parse(input: file_get_contents($input->getArgument('file')));

        if (!$factory->validate($config)) {
            return 255;
        }

        $config = $factory->normalize($config);

        $style->info(sprintf('Writing sources to file %s', $input->getArgument('output')));

        $repository = $factory->compile($config);
        file_put_contents(
            $input->getArgument('output').'/function.php',
            (new PrettyPrinter\Standard())->prettyPrintFile([
                new Node\Stmt\Return_($repository->getBuilder()->getNode()),
            ])
        );

        foreach ($repository->getFiles() as $file) {
            $directory = dirname($input->getArgument('output').'/'.$file->getPathname());
            if (!file_exists($directory)) {
                mkdir($directory, 0775, true);
            }
            file_put_contents(
                $input->getArgument('output').'/'.$file->getPathname(),
                (new PrettyPrinter\Standard())->prettyPrintFile([$file->getNode()]),
            );
        }

        return 0;
    }
}

$app = new Console\Application();

$app->addCommands([
    'test' => new TestCommand(),
    'build' => new BuildCommand(),
]);

$app->run($input, $output);
